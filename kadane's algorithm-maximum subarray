class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        /*
        // brute force
        // TC : O(n^3)
        // SC : O(1)
        int maxi = INT_MIN, n=nums.size(); 
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int sum = 0;
                for (int k = i; k <= j; k++) sum += nums[k];
                maxi = max(maxi, sum);
            }
        }
        return maxi;
        */

        /*
        // better
        // TC : O(n^2)
        // SC : O(1)
        int ans=INT_MIN, n=nums.size();
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum+=nums[j];
                ans=max(ans, sum);
            }
        }
        return ans;
        */

        // optimal
        // TC : O(n)
        // SC : O(1)
        long long ans=LONG_MIN;
        long long sum=0;
        int n=nums.size();
        for(int i=0;i<n;i++){
            sum+=nums[i];
            if (sum>ans) ans=sum;
            if (sum<0) sum=0;
        }
        return ans;
    }
};
