class Solution {
public:
    void sortColors(vector<int>& nums) {
        // 1. using any sorting techniques
        /*
        // 2. using a map
        // TC : O(n)+O(n)
        // SC : O(n)
        unordered_map<int, int> m;
        for(int i:nums) m[i]++;
        int i=0;
        while(m[0]--){
            nums[i]=0;
            i++;
        }
        while(m[1]--){
            nums[i]=1;
            i++;
        }
        while(m[2]--){
            nums[i]=2;
            i++;
        }
        */
        /*
        // 3. keeping a counter for each value
        // TC : O(n)+O(n)
        // SC : O(1)
        int cnt0 = 0, cnt1 = 0, cnt2 = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) cnt0++;
            else if (nums[i] == 1) cnt1++;
            else cnt2++;
        }
        for (int i = 0; i < cnt0; i++) nums[i] = 0; 
        for (int i = cnt0; i < cnt0 + cnt1; i++) nums[i] = 1;
        for (int i = cnt0 + cnt1; i < nums.size(); i++) nums[i] = 2;
        
        */

        // optimal
        // TC : O(n)
        // SC : O(1)
        // [0------low-1]->0;
        // [low----mid-1]->1;
        // [mid----high]->could be anything
        // [high+1 -----n-1]->2;
        int low=0, mid=0, high=nums.size()-1;
        while(mid<=high){
            if (nums[mid]==0){
                swap(nums[low], nums[mid]);
                low++;
                mid++;
            }
            else if (nums[mid]==1) mid++;
            else{
                swap(nums[mid], nums[high]);
                high--;
            }
        }
    }
};
