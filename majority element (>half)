class Solution {
public:
    int majorityElement(vector<int>& nums) {
        /*
        // brute force
        // TC : O(n^2)
        // SC : O(1)
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            int cnt = 0;
            for (int j = 0; j < n; j++) {
                if (nums[j] == nums[i]) cnt++;
            }
            if (cnt > (n / 2)) return nums[i];
        }
        return -1;
        */

        /*
        // better
        // TC : O(n)
        // SC : O(n)
        unordered_map<int, int> m;
        for(int i:nums) m[i]++;
        int n=nums.size();
        for(auto i:m){
            if (i.second>n/2) return i.first;
        }
        return -1;
        */

        // optimal
        // TC : O(n)
        // SC : O(1)
        int element, cnt=0;
        int n=nums.size();
        for(int i:nums){
            if (cnt==0){
                element=i;
                cnt++;
            }
            else if(i==element) cnt++;
            else cnt--;
        }
        return element;
        // int cnt1 = 0;
        // for (int i = 0; i < n; i++) if (nums[i] == element) cnt1++;
        // if (cnt1 > (n / 2)) return el;
        // return -1;
        // or we can also check with iterating through the loop
        // and keeping another counter for element, if it's greater 
        // n/2 return that or else -1
    }
};
