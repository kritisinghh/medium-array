taking max profit=0 and min profit = infinite
traversing through the array
- if min profit < array element -> min profit=array element
- if array element-min profit > max profit -> max profit=array element -min pro
return max profit



Short Algorithm:
Initialize: Set minpro to infinity and maxpro to 0.
Iterate through prices:
For each price, update minpro if the current price is lower.
Calculate profit as prices[i] - minpro and update maxpro if this profit is greater.
Return: After the loop, return maxpro as the maximum profit.



class Solution {
public:
    int maxProfit(vector<int>& prices) {
        /*
        // brute force
        // TC : O(n^2)
        // SC : O(1)
        int n=prices.size(), ans=0;
        for(int i=0;i<=n;i++){
            for(int j=i+1;j<n;j++){
                if (prices[j]-prices[i]>ans) ans=prices[j]-prices[i];
            }
        }
        return ans;
        */

        // optimal
        // TC : O(n)
        // SC : O(1)
        int maxi=0, mini=INT_MAX, n=prices.size();
        for(int i=0;i<n;i++){
            mini=min(mini, prices[i]);
            maxi=max(maxi, prices[i]-mini);
        }
        return maxi;
    }
};
