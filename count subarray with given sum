class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        /*
        // brute force
        // TC : O(n^3)
        // SC : O(1)
        int n = nums.size(), ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int sum=0;
                for(int p=i;p<=j;p++) sum+=nums[p];
                if (sum==k) ans++;
            }
        }
        return ans;
        */

        /*
        // better 
        // TC : O(n^2)
        // SC : O(1)
        int n = nums.size(), ans = 0;
        for (int i = 0; i < n; i++) {
            int sum = 0;  
            for (int j = i; j < n; j++) {
                sum += nums[j];  
                if (sum == k) ans++;  
            }
        }
        return ans;
        */

        // optimal
        // TC : O(n)
        // SC : O(n)
        unordered_map<int, int> m;// presum, cnt
        int ans=0;
        int sum=0;
        m[0]=1;
        for(int i:nums){
            sum+=i;
            if (m.find(sum-k)!=m.end()) ans+=m[sum-k];
            m[sum]++;
        }
        return ans;
    }
};
