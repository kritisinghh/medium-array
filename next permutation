Find decreasing element: Traverse from the end, find first i such that nums[i] < nums[i + 1].
Find next larger: From the end, find j such that nums[j] > nums[i].
Swap: Swap nums[i] and nums[j].
Reverse: Reverse the subarray from i + 1 to the end.
If no i: Reverse the entire array if no such i exists.



Short Algorithm:
Find decreasing point: Traverse from the end, find the first i where nums[i] < nums[i + 1].
Find next larger element: Find j (from the end) such that nums[j] > nums[i].
Swap: Swap nums[i] with nums[j].
Reverse the suffix: Reverse the subarray from i + 1 to the end.


class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        // 1. Brute Force: Finding all possible permutations. 
        // TC : O(n*n!)very high
        // Approach :
        // Step 1: Find all possible permutations of elements present and store them.
        // Step 2: Search input from all possible permutations.
        // Step 3: Print the next permutation present right after it.

        // 2. using STL
        // next_permutation(nums.begin(), nums.end());

        // 3. optimal
        // TC : O(3*n)
        // SC : O(1)
        int ind=-1;
        int n=nums.size();
        for(int i=n-2;i>=0;i--){
            if (nums[i]<nums[i+1]){
                ind=i;
                break;
            }
        }
        if (ind==-1){
            reverse(nums.begin(), nums.end());
            return;
        }
        for(int i=n-1;i>=ind;i--){
            if (nums[i]>nums[ind]){
                swap(nums[i], nums[ind]);
                break;
            }
        }
        reverse(nums.begin()+ind+1, nums.end());
        return;


    }
};


